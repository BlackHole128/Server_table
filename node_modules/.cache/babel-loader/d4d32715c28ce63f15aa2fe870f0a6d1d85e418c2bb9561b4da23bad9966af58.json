{"ast":null,"code":"const express = require(\"express\");\nconst mysql = require(\"mysql\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(cors());\napp.use(express.json());\n\n// ✅ Connect to MySQL\nconst db = mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"\",\n  // Use your MySQL password if set\n  database: \"server_management\"\n});\ndb.connect(err => {\n  if (err) {\n    console.error(\"Database connection failed: \" + err.stack);\n    return;\n  }\n  console.log(\"Connected to MySQL database.\");\n});\n\n// ✅ Fetch All Services with Production & DevUAT Data\napp.get(\"/api/servers\", (req, res) => {\n  const query = `\n    SELECT s.id as service_id, s.service_name, d.id as detail_id, d.type, d.purpose, d.cpu, d.memory, d.hdd, d.status\n    FROM services s\n    LEFT JOIN server_details d ON s.id = d.service_id\n    ORDER BY s.id, d.type;\n  `;\n  db.query(query, (err, results) => {\n    if (err) {\n      res.status(500).json({\n        error: \"Database error\"\n      });\n    } else {\n      const formattedData = [];\n      results.forEach(row => {\n        let service = formattedData.find(s => s.id === row.service_id);\n        if (!service) {\n          service = {\n            id: row.service_id,\n            serviceName: row.service_name,\n            production: [],\n            devUAT: []\n          };\n          formattedData.push(service);\n        }\n        if (row.type === \"Production\") {\n          service.production.push(row);\n        } else {\n          service.devUAT.push(row);\n        }\n      });\n      res.json(formattedData);\n    }\n  });\n});\n\n// ✅ Add a New Service with Production & DevUAT\napp.post(\"/api/servers\", (req, res) => {\n  const {\n    serviceName,\n    production,\n    devUAT\n  } = req.body;\n  db.query(\"INSERT INTO services (service_name) VALUES (?)\", [serviceName], (err, result) => {\n    if (err) {\n      res.status(500).json({\n        error: \"Database error\"\n      });\n    } else {\n      const serviceId = result.insertId;\n      const insertDetails = [...production, ...devUAT].map(row => [serviceId, row.type, row.purpose, row.cpu, row.memory, row.hdd, row.status]);\n      db.query(\"INSERT INTO server_details (service_id, type, purpose, cpu, memory, hdd, status) VALUES ?\", [insertDetails], err => {\n        if (err) {\n          res.status(500).json({\n            error: \"Database error\"\n          });\n        } else {\n          res.json({\n            id: serviceId,\n            message: \"Service added successfully!\"\n          });\n        }\n      });\n    }\n  });\n});\n\n// ✅ Start Server\napp.listen(5000, () => {\n  console.log(\"Server running on port 5000\");\n});","map":{"version":3,"names":["express","require","mysql","cors","app","use","json","db","createConnection","host","user","password","database","connect","err","console","error","stack","log","get","req","res","query","results","status","formattedData","forEach","row","service","find","s","id","service_id","serviceName","service_name","production","devUAT","push","type","post","body","result","serviceId","insertId","insertDetails","map","purpose","cpu","memory","hdd","message","listen"],"sources":["F:/React table 2/server-table/src/ServerTable.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql\");\r\nconst cors = require(\"cors\");\r\n\r\nconst app = express();\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// ✅ Connect to MySQL\r\nconst db = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"\", // Use your MySQL password if set\r\n  database: \"server_management\"\r\n});\r\n\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error(\"Database connection failed: \" + err.stack);\r\n    return;\r\n  }\r\n  console.log(\"Connected to MySQL database.\");\r\n});\r\n\r\n// ✅ Fetch All Services with Production & DevUAT Data\r\napp.get(\"/api/servers\", (req, res) => {\r\n  const query = `\r\n    SELECT s.id as service_id, s.service_name, d.id as detail_id, d.type, d.purpose, d.cpu, d.memory, d.hdd, d.status\r\n    FROM services s\r\n    LEFT JOIN server_details d ON s.id = d.service_id\r\n    ORDER BY s.id, d.type;\r\n  `;\r\n\r\n  db.query(query, (err, results) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Database error\" });\r\n    } else {\r\n      const formattedData = [];\r\n      results.forEach((row) => {\r\n        let service = formattedData.find((s) => s.id === row.service_id);\r\n        if (!service) {\r\n          service = { id: row.service_id, serviceName: row.service_name, production: [], devUAT: [] };\r\n          formattedData.push(service);\r\n        }\r\n        if (row.type === \"Production\") {\r\n          service.production.push(row);\r\n        } else {\r\n          service.devUAT.push(row);\r\n        }\r\n      });\r\n      res.json(formattedData);\r\n    }\r\n  });\r\n});\r\n\r\n// ✅ Add a New Service with Production & DevUAT\r\napp.post(\"/api/servers\", (req, res) => {\r\n  const { serviceName, production, devUAT } = req.body;\r\n\r\n  db.query(\"INSERT INTO services (service_name) VALUES (?)\", [serviceName], (err, result) => {\r\n    if (err) {\r\n      res.status(500).json({ error: \"Database error\" });\r\n    } else {\r\n      const serviceId = result.insertId;\r\n\r\n      const insertDetails = [...production, ...devUAT].map((row) => [\r\n        serviceId, row.type, row.purpose, row.cpu, row.memory, row.hdd, row.status\r\n      ]);\r\n\r\n      db.query(\"INSERT INTO server_details (service_id, type, purpose, cpu, memory, hdd, status) VALUES ?\", [insertDetails], (err) => {\r\n        if (err) {\r\n          res.status(500).json({ error: \"Database error\" });\r\n        } else {\r\n          res.json({ id: serviceId, message: \"Service added successfully!\" });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// ✅ Start Server\r\napp.listen(5000, () => {\r\n  console.log(\"Server running on port 5000\");\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}